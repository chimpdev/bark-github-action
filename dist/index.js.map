{"version":3,"file":"index.js","mappingssources":["../webpack/runtime/compat",".././lib/index.js"],"sourcesContent":["\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\\/\\/\\/\\w:/) ? 1 : 0, -1) + \"/\";","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.run = run;\nconst core = __importStar(require(\"@actions/core\"));\nconst bark_js_1 = require(\"@thiskyhan/bark.js\");\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const serverUrl = core.getInput('server_url', { required: true });\n        const deviceKey = core.getInput('device_key', { required: true });\n        const client = new bark_js_1.BarkClient({\n            baseUrl: serverUrl,\n            key: deviceKey\n        });\n        const payload = {\n            body: core.getInput('body', { required: true }),\n            title: core.getInput('title'),\n            subtitle: core.getInput('subtitle'),\n            badge: parseInt(core.getInput('badge')) || 0,\n            sound: core.getInput('sound'),\n            group: core.getInput('group'),\n            copy: core.getInput('copy')\n        };\n        const icon = core.getInput('icon');\n        if (icon) {\n            if (!icon.endsWith('.jpg'))\n                core.setFailed('Icon must be a .jpg file');\n            payload.icon = `${icon.split('.jpg')[0]}.jpg`;\n        }\n        const volume = parseInt(core.getInput('volume'));\n        if (volume) {\n            if (isNaN(volume))\n                core.setFailed('Volume must be a number');\n            if (volume < 0 || volume > 10)\n                core.setFailed('Volume must be between 0 and 10');\n            payload.volume = volume;\n        }\n        const level = core.getInput('level');\n        if (level) {\n            if (!['critical', 'active', 'timeSensitive', 'passive'].includes(level))\n                core.setFailed('Level must be one of critical, active, timeSensitive, passive');\n            payload.level = level;\n        }\n        const url = core.getInput('url');\n        if (url) {\n            try {\n                new URL(url);\n                payload.url = url;\n            }\n            catch (_a) {\n                core.setFailed('Invalid URL');\n            }\n        }\n        const isArchive = core.getInput('is_archive');\n        if (isArchive) {\n            if (isArchive !== 'true' && isArchive !== 'false')\n                core.setFailed('is_archive must be a boolean');\n        }\n        const autoCopy = core.getInput('auto_copy');\n        if (autoCopy) {\n            if (autoCopy !== 'true' && autoCopy !== 'false')\n                core.setFailed('auto_copy must be a boolean');\n        }\n        const call = core.getInput('call');\n        if (call) {\n            if (call !== 'true' && call !== 'false')\n                core.setFailed('call must be a boolean');\n        }\n        const action = core.getInput('action');\n        if (action) {\n            if (action !== 'none')\n                core.setFailed('action must be none');\n        }\n        const response = yield client.pushMessage(payload);\n        core.info(`Response code: ${response.code}`);\n        core.info(`Response message: ${response.message}`);\n        if (response.code !== 200) {\n            core.setFailed('Failed to send notification');\n        }\n        else {\n            core.info('Notification sent successfully');\n        }\n        core.setOutput('response_code', response.code);\n        core.setOutput('response_message', response.message);\n        core.setOutput('response_timestamp', response.timestamp);\n        core.info('Action completed');\n    });\n}\nvoid run();\n"],"names":[],"sourceRoot":""}